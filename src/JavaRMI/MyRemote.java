package JavaRMI;

import java.rmi.Remote;
import java.rmi.RemoteException;

/**
 * В Java RMI создает клиентские и сервисные вспомогательные объекты. Эта технология сама знает как сделает клиентский
 * вспомогательный объект похожим на настоящий сервис (т.е она умеет создавать объекты, которые содержат те же методы,
 * что и удаленный сервис.
 * <p>
 * RMI обеспечивает всю необходимую инфаструкутуру для работы, включая поисковый сервис, чтобы клиент мог найти и
 * получить клиентский вспомогательный объект.
 * <p>
 * Используя RMI мы избавляемся от необходимости работы с сетевым кодом или вводом/выводом.
 * Клиент сможет вызвать удаленные методы (содержащиеся в настоящем сервисе) как будто они принадлежат
 * обычному объекту, работающему под управлением той же локальной JVM.
 * <p>
 * Создание удаленного сервиса:
 * 1) Создание удаленного интерфейса
 * 2) Создание реализации удаленного интерфейса
 * 3) Генерирование "Заглушки" и "скелетов" с помощью утилиты rmic
 * 4) Запуск ресстра RMI (rmiregistry)
 * 5) Запуск удаленного сервиса
 */

// Удаленный интерфейс
public interface MyRemote extends Remote { // интерфейс должен бть унаследован от Remote
    public String sayHello() throws RemoteException; // Все удаленне методы должны содержать объявление RemoteException
}
