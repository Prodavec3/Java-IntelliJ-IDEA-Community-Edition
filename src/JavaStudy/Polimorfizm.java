package JavaStudy;

public class Polimorfizm {
    /**
     * Если мы создадим Animal animal = new Dog();
     * то метод будет вызываться animal. тот, который определен в Dog, то есть
     * в Animal есть метод eat(), а в Dog он переопределен @Override eat()
     * и в итоге при animal.eat() будет вызван 2й метод (в Dog который),
     * если же он не переопределен, то вызовется тот что в Animal.
     * Однако, при использовании animal. методы доступны только те, которые есть именно в Animal
     *
     *
     * Благодаря полиморфизму мы можем создать метод, который примнимает входной параметр, например Animal
     * А передавать туда мы можем все дочерние ему классы, Dog, Cat и тд и вызывать там методы
     * Если метода внутри Cat нет, то вызовется тот что в Animal, если у Dog он переопределен - вызовется именно он
     */
}
